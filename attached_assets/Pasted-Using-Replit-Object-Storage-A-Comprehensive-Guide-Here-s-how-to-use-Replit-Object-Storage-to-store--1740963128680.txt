Using Replit Object Storage: A Comprehensive Guide
Here's how to use Replit Object Storage to store and retrieve images/objects in your project:
1. Setup and Configuration
First, you need to set up the Object Storage client:
import { Client } from '@replit/object-storage';
// Your bucket ID should be in your .replit file
const BUCKET_ID = 'your-bucket-id';
const client = new Client({ bucket: BUCKET_ID });
The bucket ID is automatically configured in your .replit file when you create a bucket through the Object Storage tool.
2. Core Functions
Uploading Files
async function uploadImage(
  filename: string,
  buffer: Buffer,
  metadata?: { [key: string]: string }
): Promise<string> {
  const { ok, error } = await client.uploadFromBytes(filename, buffer, { metadata });
  if (!ok) {
    throw new Error(Failed to upload image: ${error});
  }
  return filename;
}
Retrieving Files
async function getImage(filename: string): Promise<Buffer> {
  const { ok, value: data, error } = await client.downloadAsBytes(filename);
  if (!ok || !data || data.length === 0) {
    throw new Error(Failed to get image: ${error});
  }
  // IMPORTANT: Return the first element of the array
  return data[0];
}
Deleting Files
async function deleteImage(url: string): Promise<void> {
  try {
    // Extract filename if it's a full URL
    const filename = url.includes(BUCKET_ID)
      ? decodeURIComponent(url.split(${BUCKET_ID}.id.repl.co/)[1])
      : url.startsWith('/api/storage/')
        ? decodeURIComponent(url.split('/api/storage/')[1])
        : url;
    const { ok, error } = await client.delete(filename);
    if (!ok) {
      throw new Error(Failed to delete image: ${error});
    }
  } catch (error) {
    console.error('Error deleting image:', error);
    throw error;
  }
}
3. Serving Images from API Routes
To serve images through your Express API:
app.get("/api/storage/:filename", async (req, res, next) => {
  try {
    const filename = decodeURIComponent(req.params.filename);
    const imageData = await getImage(filename);
    // Set appropriate content type based on file extension
    const ext = filename.split('.').pop()?.toLowerCase();
    const contentType =
      ext === 'png'
        ? 'image/png'
        : ext === 'jpg' || ext === 'jpeg'
        ? 'image/jpeg'
        : ext === 'gif'
        ? 'image/gif'
        : 'application/octet-stream';
    // Set headers for caching and content type
    res.setHeader('Content-Type', contentType);
    res.setHeader('Cache-Control', 'public, max-age=31536000'); // Cache for 1 year
    res.send(imageData);
  } catch (error) {
    next(error);
  }
});
4. Handling Uploads
To handle file uploads through a form:
import multer from 'multer';
const upload = multer();
app.post("/api/upload", upload.single("file"), async (req, res, next) => {
  try {
    if (!req.file) {
      return res.status(400).json({ message: "No file provided" });
    }
    const filename = files/${Date.now()}-${req.file.originalname};
    const buffer = req.file.buffer;
    await uploadImage(filename, buffer, { "content-type": req.file.mimetype });
    res.json({ url: filename });
  } catch (error) {
    next(error);
  }
});
5. Client-Side Usage
On the client side, display images using:
function getImageUrl(filename: string): string {
  if (!filename) return '';
  // Handle different URL formats
  if (filename.startsWith('http')) {
    return filename;
  }
  return /api/storage/${encodeURIComponent(filename)};
}
// Usage in React components
<img
  src={getImageUrl(imageFilename)}
  alt="Description"
  className="object-contain"
/>
Key Points to Remember
Retrieve the first element of the array: When downloading as bytes, the result comes in an array, and you need to access the first element: data[0].
Handle paths consistently: Store images in organized paths like projects/image1.png or users/avatars/user123.jpg.
Include proper content type: When serving files, set the correct content type based on file extension.
Error handling: Always check for ok status and handle errors appropriately.
URL encoding/decoding: Remember to encode filenames in URLs and decode them when retrieving.
Let me know if this helps, or if you need more details!