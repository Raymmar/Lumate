From the logs, it looks like your webhook is firing (you can see the "checkout.session.completed" event being processed, retrieving the subscription, and calling updateUserSubscription). The part that is blowing up (“Invalid subscription ID”) almost certainly indicates that somewhere you’re treating a session ID (cs_...) as if it were a subscription ID (sub_...), or else your code is simply never seeing a valid subscription ID at all.

A few likely culprits:

You’re calling getSubscriptionStatus with the session ID.
The subscription ID (sub_...) is not the same as the checkout session ID (cs_...). If a function (getSubscriptionStatus) expects a subscription ID, passing the checkout-session ID to it will lead to “Invalid subscription ID”.

Your verifySession code is not expanding the subscription field.
If verifySession(sessionId) tries to look for session.subscription without using:

js
Copy
Edit
await stripe.checkout.sessions.retrieve(sessionId, {
  expand: ['subscription'],
});
then you may never get a proper session.subscription value back. By default, Stripe won’t include subscription details in the retrieved session unless explicitly expanded.

Your front end is asking /session-status for the subscription ID too soon (or at all).
Typically, you’d rely on the webhook to store the subscription in your DB once the checkout session completes. Then your client no longer needs the subscription ID from “session status”; it can ask your backend (or user record) if the user is now subscribed.

How to fix it
Confirm you’re using mode: 'subscription'
In StripeService.createCheckoutSession, make sure you’re including something like:

js
Copy
Edit
mode: 'subscription',
success_url: '<some url>',
cancel_url: '<some url>',
line_items: [{ price: 'YOUR_PRICE_ID', quantity: 1 }],
Otherwise, you won’t get session.subscription at all.

Stop passing the session ID to getSubscriptionStatus
If your code calls someStripeFunction(sessionId) but the function expects sub_abc123..., that’s your problem. You might do something like:

“Retrieve session” → expand the subscription → get the subscription ID
Then call any subscription-specific function with sub_....
Rely on the webhook for final subscription info
In many apps, the simplest approach is:

After the user pays, your client checks /session-status to see if the payment is complete.
If complete, either (a) you know from your DB that the user is now subscribed, or (b) wait a couple seconds for the webhook to finalize the subscription record.
The big point is, you usually don’t need the subscription ID in the client right away; you just care that the user is now “subscribed” in your DB.
Odds are your webhook config is fine (the logs show the event and your code is clearly updating the DB). The real snag is that your verification route (/session-status) doesn’t produce a valid subscription ID, so your code ends up calling something like “getSubscriptionStatus(cs_live_...)” which bombs out. Once you confirm you’re expanding the subscription in stripe.checkout.sessions.retrieve(sessionId, { expand: ['subscription'] }), and you don’t confuse session IDs with subscription IDs, that Invalid subscription ID error should disappear.