After reviewing the code, I can see several factors that could cause the discrepancy between the sync count (109) and the displayed attendee count (107):

1. Database Query Discrepancy
The attendee list endpoint uses an INNER JOIN with the people table:

const result = await db
  .select({
    id: people.id,
    userName: people.userName,
    email: people.email,
    avatarUrl: people.avatarUrl,
    api_id: people.api_id,
  })
  .from(attendance)
  .innerJoin(people, eq(attendance.userEmail, people.email))
  .where(eq(attendance.eventApiId, eventId))
  .orderBy(attendance.registeredAt);
This INNER JOIN will only return records where the emails match exactly. If there are case differences or whitespace issues between the attendance and people records, some records might be excluded.

2. React Query Caching
The attendee list is fetched using React Query:

const { data: attendees = [], isLoading: isLoadingAttendees } = useQuery<Person[]>({
  queryKey: [`/api/admin/events/${event.api_id}/attendees`],
  queryFn: async () => {
    const response = await fetch(`/api/admin/events/${event.api_id}/attendees`);
    if (!response.ok) throw new Error('Failed to fetch attendees');
    return response.json();
  },
  enabled: !!event.api_id && !!user
});
React Query maintains its own cache. The cache is only invalidated when:

The component is unmounted and remounted
The query key changes
You explicitly call queryClient.invalidateQueries()
When syncing attendees, I see there is an attempt to invalidate the cache:

queryClient.invalidateQueries({ queryKey: [`/api/admin/events/${event.api_id}/attendees`] });
But this might not always work correctly, especially if the component rendering isn't updated.

3. Sync Process vs Display Process
During the sync process, there are two different operations:

Sync process: Directly counts all records from Luma's API (109 confirmed)
Display process: Queries the database with JOINs and filters (107 shown)
4. Possible Solution
To debug and fix this issue, I recommend:

Check case sensitivity in the email matching. Make sure both attendance.userEmail and people.email are consistently normalized (both lowercase).
Add logging to capture emails during sync vs display to identify which records aren't showing up.
Consider using a LEFT JOIN instead of INNER JOIN if you want to show all attendance records.
The most likely culprit is the INNER JOIN combined with email case sensitivity. The email case is handled inconsistently in different parts of the code:

Sometimes emails are explicitly lowercased: userEmail: data.userEmail.toLowerCase()
Other times they might be stored as-is
Ideally, you should ensure all email addresses are consistently lowercase throughout the system.