private async fetchAllPeople(): Promise<any[]> {
    let allPeople: any[] = [];
    let nextCursor: string | null = null;
    let prevCursor: string | null = null;
    let hasMore = true;
    let attempts = 0;
    let noProgressCount = 0;
    const MAX_ATTEMPTS = 1000;
    const MAX_NO_PROGRESS_ATTEMPTS = 3;
    const BACKOFF_DELAY = 1000;

    console.log("Starting to fetch all people from Luma API...");

    while (hasMore && attempts < MAX_ATTEMPTS && noProgressCount < MAX_NO_PROGRESS_ATTEMPTS) {
        try {
            attempts++;

            // Always start with a completely fresh request on first attempt
            const params: Record<string, string> = {};
            if (nextCursor) {
                params.cursor = nextCursor;
                params.limit = "50";
            }

            console.log("Making request with:", {
                cursor: nextCursor,
                prevCursor,
                totalCollected: allPeople.length,
                attempt: attempts,
                noProgressCount,
            });

            const response = await lumaApiRequest("calendar/list-people", params);

            if (!response || !Array.isArray(response.entries)) {
                console.error("Invalid response format:", response);
                break;
            }

            const people = response.entries;

            // Stop pagination if no new people are received
            if (!people.length) {
                console.log("No people in response, stopping pagination.");
                break;
            }

            const previousCount = allPeople.length;
            allPeople = allPeople.concat(people);

            // Detect if we're receiving duplicate results
            if (allPeople.length === previousCount) {
                noProgressCount++;
                console.warn(`No new people received. Attempt ${noProgressCount} of ${MAX_NO_PROGRESS_ATTEMPTS}`);

                if (noProgressCount >= MAX_NO_PROGRESS_ATTEMPTS) {
                    console.log(`Stopping after ${noProgressCount} attempts with no new people`);
                    break;
                }
            } else {
                noProgressCount = 0;
                console.log(`Added ${allPeople.length - previousCount} new people. Total: ${allPeople.length}`);
            }

            // Pagination controls
            hasMore = response.has_more === true;
            prevCursor = nextCursor;
            nextCursor = response.next_cursor;

            // Detect if cursor is stuck
            if (nextCursor && nextCursor === prevCursor) {
                console.log("Cursor is not progressing, stopping pagination.");
                break;
            }

            if (!hasMore) {
                console.log("No more results available.");
                break;
            }

            if (!nextCursor) {
                console.log("No next cursor provided, stopping pagination.");
                break;
            }

            // Delay with exponential backoff if we get stuck
            await new Promise((resolve) => setTimeout(resolve, BACKOFF_DELAY * (noProgressCount + 1)));
        } catch (error) {
            console.error("Failed to fetch people batch:", error);
            noProgressCount++;
            console.warn(`Request failed. Attempt ${noProgressCount} of ${MAX_NO_PROGRESS_ATTEMPTS}`);

            if (allPeople.length > 0 && noProgressCount >= MAX_NO_PROGRESS_ATTEMPTS) {
                console.log(`Returning ${allPeople.length} people collected before error.`);
                return allPeople;
            }

            if (noProgressCount < MAX_NO_PROGRESS_ATTEMPTS) {
                await new Promise((resolve) => setTimeout(resolve, 2000));
                continue;
            }

            throw error;
        }
    }

    console.log(`Completed fetching all people. Total count: ${allPeople.length}`);
    return allPeople;
}
